function decompressKey(compressedKey: String) ->
    let [orgId, ...locationIds] = compressedKey.split(Device.delimiter)
    let deviceId = locationIds.pop()
    var key = Key.create(Organization, orgId)

// let navState = {}
//     foo: {}
//         bar: {}
//             what: 2, isnot: 3, up

// {
//     foo, bar
//     ...rest
// } = value

// [
//     foo, bar
//     {
//         a, b
//         ...more
//     }
//     ...rest
// ] = value

// export function cell(material, thermalEnergy) ->
//     return
//         |
//             (thermalEnergy & 0xFFFF) << 8
//             (material & 0xFF)

// import .functions
//     clamp

// export default data struct Range
//     min: F32
//     max: F32

//     constructor(min: F32, max: F32) ->
//         this.min = Math.min(min, max)
//         this.max = Math.max(min, max)

//     add(min: F32, max: F32 = min) ->
//         if min == 0 && max == 0
//             return this
//         return new Range(this.min + min, this.max + max)

//     overlaps(range: Range | Null) ->
//         return &&
//             range isnt Null
//             range.min >= this.min
//             range.min <= this.max
//             range.max >= this.min
//             range.max <= this.max

//     intersect(range: Range | Null) ->
//         if rang is Null || !this.overlaps(range)
//             return null
//         return new Range()
//             clamp(range.min, this.min, this.max)
//             clamp(range.max, this.min, this.max)


//     y: Number
//     foo: () => Boolean

// meta Indexed: Boolean = true

// data class Vector2

//     [Indexed]: false
//     x: Number

//     [Indexed]
//     y: Number

//     get foo() -> 12

// data struct Vector3
//     x: F32
//     y: F32
//     z: F32

// data struct Sphere
//     radius: F32
//     center: Vector3
//     center2: Vector3

// import @glas.platform.graphics.(Graphics3D)
// import (ionscript) { Range, is }

// import @glas:platform:graphics:math:{Color, Matrix4, Vector3}
// import @glas:platform:graphics:elements:Dock
// import @glas:platform:graphics:Graphics.{useGraphics}
//     useGraphics
// import @glas:platform:graphics:Graphics3D

// foo() ->
//     return bar()
//         1
//         2

// let foo = () -> throw new Error()
//     1
//     2

// // foo(x = 12)

// for i in 0..12
//     log(i)

// x = y = foo()
//     1
//     2
